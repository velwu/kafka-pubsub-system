version: '3.8'  # Using a more recent compose file version for better feature support

services:
  # --------------------------------
  # ZOOKEEPER SERVICE
  # --------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    # IMPROVEMENT 1: Data Persistence with Volumes
    # Ensure Zookeeper data persists across container restarts
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    # IMPROVEMENT 2: Health Checks
    # Ensure dependent services only start when Zookeeper is truly ready
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    # IMPROVEMENT 3: Restart Policy
    # Automatically restart the container if it crashes
    restart: unless-stopped
    # IMPROVEMENT 4: Resource Constraints
    # Prevent container from consuming excessive resources
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    # IMPROVEMENT 5: Network Isolation
    # Isolate containers in a dedicated network for better security
    networks:
      - kafka-network

  # --------------------------------
  # KAFKA SERVICE
  # --------------------------------
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      # IMPROVEMENT 6: Dependent Service Health
      # Only start when Zookeeper is healthy, not just when it's running
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # IMPROVEMENT 7: Kafka Performance Tuning
      # Optimize Kafka for better performance
      KAFKA_NUM_PARTITIONS: 12  # Increased from 3 to allow more parallel consumers
      KAFKA_LOG_RETENTION_HOURS: 1  # Reduced from 72 for faster retention demos
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # OPTIMIZATION: Additional Performance Settings
      # Enhance throughput and parallel processing capabilities
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 60000  # Check retention every minute
      KAFKA_NUM_IO_THREADS: 8  # Increase I/O threads for better performance
      KAFKA_NUM_NETWORK_THREADS: 8  # More network threads for handling connections
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 1048576  # 1MB receive buffer
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 1048576  # 1MB send buffer
      KAFKA_COMPRESSION_TYPE: 'producer'  # Let producers decide compression
      KAFKA_MESSAGE_MAX_BYTES: 1000012  # ~1MB max message size
    # IMPROVEMENT 8: Data Persistence with Volumes
    # Ensure Kafka data persists across container restarts
    volumes:
      - kafka-data:/var/lib/kafka/data
    # IMPROVEMENT 9: Health Check for Kafka
    # Verify Kafka is truly ready for connections
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    networks:
      - kafka-network

  # --------------------------------
  # KAFKA UI SERVICE
  # --------------------------------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      # IMPROVEMENT 10: Dependent Service Health
      # Only start UI when Kafka is truly ready
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    # IMPROVEMENT 11: Add Restart Policy to UI
    # Ensure UI restarts automatically if it crashes
    restart: unless-stopped
    # IMPROVEMENT 12: Resource Constraints for UI
    # Prevent UI container from consuming excessive resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - kafka-network

  # --------------------------------
  # POLICY PRODUCER SERVICE
  # --------------------------------
  policy-producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    container_name: policy-producer
    depends_on:
      # IMPROVEMENT 13: Keep this dependency on Kafka's health
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: policy-events
      BATCH_SIZE: 100  # Increased from 10 for better throughput
      INTERVAL_SECONDS: 5
      # OPTIMIZATION: Producer Performance Settings
      # Enable multiprocessing and batching optimizations
      PRODUCER_PROCESSES: 4  # Number of parallel processes for CPU-bound work
      EVENTS_PER_PROCESS: 1000  # Events each process generates
      LINGER_MS: 10  # Wait 10ms to batch messages together
      COMPRESSION_TYPE: 'snappy'  # Fast compression for better throughput
      ENABLE_MULTIPROCESSING: 'true'  # Toggle for demo purposes
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'  # Increased from 0.5 to support multiprocessing
          memory: 1G  # Increased from 512M for parallel processes
        reservations:
          cpus: '1'  # Increased from 0.1
          memory: 512M  # Increased from 256M
    networks:
      - kafka-network

  # --------------------------------
  # POLICY CONSUMER SERVICE
  # --------------------------------
  policy-consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    container_name: policy-consumer
    depends_on:
    # IMPROVEMENT 14: Keep this dependency on Kafka's health
      kafka:
        condition: service_healthy
      policy-producer:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: policy-events
      CONSUMER_GROUP: policy-processor
      # OPTIMIZATION: Consumer Performance Settings
      # Support I/O parallelism and batch processing
      MAX_POLL_RECORDS: 500  # Increase batch size for processing
      BATCH_SIZE: 500  # Increased from 100
      POLL_TIMEOUT_MS: 100  # Reduced from 1000 for faster response
      THREAD_POOL_SIZE: 20  # Thread pool for parallel I/O operations
      CONNECTION_POOL_SIZE: 30  # Database connection pool size
      ENABLE_THREADING: 'true'  # Toggle for demo purposes
      # Scaling support
      MAX_CONSUMERS: 12  # Match partition count for maximum parallelism
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'  # Increased from 0.5 for threading
          memory: 1G  # Increased from 512M for connection pools
        reservations:
          cpus: '0.5'  # Increased from 0.1
          memory: 512M  # Increased from 256M
      # OPTIMIZATION: Enable horizontal scaling
      # Uncomment to run multiple consumer instances
      # replicas: 3  # Run 3 consumer instances
    networks:
      - kafka-network

# ========================================
# SCALING NOTES:
# Current: Single instance with 0.5 CPU (50% of one core)
# 
# For production scaling:
# 1. Vertical: Increase CPU/memory limits
#    - cpus: '4' (use up to 4 cores)
#    - memory: 4G
# 
# 2. Horizontal: Add replicas
#    - deploy.replicas: 5
#    - Each replica gets its own CPU allocation
# 
# 3. Combined approach:
#    - 10 replicas Ã— 2 CPUs = 20 total cores
#    - Better fault tolerance
#
# OPTIMIZATION SCALING:
# - Producer: 2 CPUs for multiprocessing (4 processes)
# - Consumer: 1 CPU with threading for I/O parallelism
# - Kafka: 12 partitions allow up to 12 parallel consumers
# - Use: docker-compose up -d --scale policy-consumer=12
# ========================================

# --------------------------------
# PERSISTENT VOLUMES
# --------------------------------
# IMPROVEMENT 15: Define Named Volumes
# Creates persistent storage that survives container restarts
volumes:
  zookeeper-data:
    # Data volume for Zookeeper to persist cluster state information
  zookeeper-logs:
    # Log volume for Zookeeper to persist transaction logs
  kafka-data:
    # Data volume for Kafka to persist message storage

# --------------------------------
# CUSTOM NETWORK
# --------------------------------
# IMPROVEMENT 16: Custom Network Configuration
# Isolates containers within a dedicated network for better security
networks:
  kafka-network:
    driver: bridge